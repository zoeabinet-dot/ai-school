name: CI Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379/0
      SECRET_KEY: test-secret-key-please-replace
      DEBUG: 'False'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y build-essential libpq-dev

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python deps (prod)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-prod.txt

      - name: Configure DB env
        run: |
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> $GITHUB_ENV
          echo "REDIS_URL=${{ env.REDIS_URL }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ env.SECRET_KEY }}" >> $GITHUB_ENV

      - name: Run migrations
        run: |
          python manage.py migrate --noinput
      - name: Run backend tests
        run: |
          pytest -q

      - name: Collect static
        run: python manage.py collectstatic --noinput

      - name: Start application (gunicorn) in background
        run: |
          # Start gunicorn on port 8000 so frontend tests can hit the API
          gunicorn --bind 0.0.0.0:8000 --workers 1 --timeout 120 ai_school_management.wsgi:application &
          # Wait for health endpoint
          for i in {1..30}; do
            if curl -sfS http://localhost:8000/health/; then
              echo "backend up" && break
            fi
            echo "waiting for backend... ($i)"
            sleep 2
          done

      - name: Run frontend integration tests
        run: |
          cd frontend
          npm ci
          # Run type-check and unit/integration tests; integration tests expect backend at localhost:8000
          npm run type-check
          npm run lint || true
          npm test -- --runInBand --watchAll=false --passWithNoTests
