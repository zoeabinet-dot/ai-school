# Generated by Django 5.0.2 on 2025-09-01 00:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("ai_teacher", "0002_alter_ailesson_created_by"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AdvancedBehavioralMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gaze_tracking", models.JSONField(default=dict)),
                ("attention_heatmap", models.JSONField(default=dict)),
                ("distraction_events", models.JSONField(default=list)),
                ("facial_expressions", models.JSONField(default=dict)),
                ("emotion_transitions", models.JSONField(default=list)),
                ("micro_expression_count", models.IntegerField(default=0)),
                ("posture_changes", models.JSONField(default=list)),
                ("movement_patterns", models.JSONField(default=dict)),
                (
                    "restlessness_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("note_taking_detected", models.BooleanField(default=False)),
                ("hand_raising_detected", models.BooleanField(default=False)),
                ("device_usage_patterns", models.JSONField(default=dict)),
                (
                    "lighting_quality",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("poor", "Poor"),
                            ("fair", "Fair"),
                            ("good", "Good"),
                            ("excellent", "Excellent"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("background_distractions", models.JSONField(default=list)),
                (
                    "audio_quality_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("fatigue_indicators", models.JSONField(default=list)),
                ("stress_indicators", models.JSONField(default=list)),
                ("engagement_predictors", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "behavioral_analysis",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="advanced_metrics",
                        to="ai_teacher.aibehavioralanalysis",
                    ),
                ),
            ],
            options={
                "db_table": "advanced_behavioral_metrics",
            },
        ),
        migrations.CreateModel(
            name="ConversationContext",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("conversation_topics", models.JSONField(default=list)),
                ("sentiment_history", models.JSONField(default=list)),
                ("learning_indicators", models.JSONField(default=dict)),
                (
                    "current_understanding_level",
                    models.CharField(
                        choices=[
                            ("confused", "Confused"),
                            ("struggling", "Struggling"),
                            ("learning", "Learning"),
                            ("understanding", "Understanding"),
                            ("mastered", "Mastered"),
                        ],
                        default="learning",
                        max_length=20,
                    ),
                ),
                ("engagement_pattern", models.JSONField(default=dict)),
                ("response_preferences", models.JSONField(default=dict)),
                (
                    "ai_response_strategy",
                    models.CharField(default="adaptive", max_length=50),
                ),
                ("personalization_data", models.JSONField(default=dict)),
                ("topic_transitions", models.JSONField(default=list)),
                ("context_breaks", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "conversation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enhanced_context",
                        to="ai_teacher.aiconversation",
                    ),
                ),
            ],
            options={
                "db_table": "conversation_contexts",
            },
        ),
        migrations.CreateModel(
            name="LanguagePreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "primary_language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("am", "Amharic (አማርኛ)"),
                            ("om", "Oromo (Afaan Oromoo)"),
                            ("ti", "Tigrinya (ትግርኛ)"),
                            ("so", "Somali (Soomaali)"),
                            ("sw", "Swahili (Kiswahili)"),
                            ("ar", "Arabic (العربية)"),
                            ("fr", "French (Français)"),
                        ],
                        default="en",
                        max_length=10,
                    ),
                ),
                ("secondary_languages", models.JSONField(blank=True, default=list)),
                (
                    "ai_response_language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("am", "Amharic (አማርኛ)"),
                            ("om", "Oromo (Afaan Oromoo)"),
                            ("ti", "Tigrinya (ትግርኛ)"),
                            ("so", "Somali (Soomaali)"),
                            ("sw", "Swahili (Kiswahili)"),
                            ("ar", "Arabic (العربية)"),
                            ("fr", "French (Français)"),
                        ],
                        default="en",
                        max_length=10,
                    ),
                ),
                ("auto_translate", models.BooleanField(default=True)),
                ("show_original_text", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="language_preference",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "language_preferences",
            },
        ),
        migrations.CreateModel(
            name="LearningOutcomePrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "predicted_completion_time",
                    models.IntegerField(
                        help_text="Predicted completion time in minutes"
                    ),
                ),
                (
                    "predicted_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "predicted_difficulty_level",
                    models.CharField(
                        choices=[
                            ("too_easy", "Too Easy"),
                            ("appropriate", "Appropriate"),
                            ("challenging", "Challenging"),
                            ("too_difficult", "Too Difficult"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "prediction_confidence",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("key_factors", models.JSONField(default=list)),
                ("risk_factors", models.JSONField(default=list)),
                ("success_indicators", models.JSONField(default=list)),
                ("pre_lesson_recommendations", models.JSONField(default=list)),
                ("during_lesson_adaptations", models.JSONField(default=list)),
                ("post_lesson_follow_up", models.JSONField(default=list)),
                ("actual_completion_time", models.IntegerField(blank=True, null=True)),
                (
                    "actual_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "prediction_accuracy",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outcome_predictions",
                        to="ai_teacher.ailesson",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outcome_predictions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "learning_outcome_predictions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PredictiveAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("analysis_date", models.DateTimeField(auto_now_add=True)),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("academic_performance", "Academic Performance"),
                            ("engagement_prediction", "Engagement Prediction"),
                            ("completion_probability", "Completion Probability"),
                            ("learning_pathway", "Learning Pathway Optimization"),
                            ("intervention_needed", "Intervention Recommendation"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "prediction_horizon",
                    models.CharField(
                        choices=[
                            ("1_week", "1 Week"),
                            ("1_month", "1 Month"),
                            ("1_semester", "1 Semester"),
                            ("1_year", "1 Year"),
                        ],
                        max_length=20,
                    ),
                ),
                ("input_features", models.JSONField(default=dict)),
                ("predictions", models.JSONField(default=dict)),
                ("confidence_scores", models.JSONField(default=dict)),
                ("model_version", models.CharField(max_length=50)),
                (
                    "model_accuracy",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("recommended_actions", models.JSONField(default=list)),
                (
                    "intervention_priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("actual_outcomes", models.JSONField(blank=True, default=dict)),
                (
                    "prediction_accuracy",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predictive_analyses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "predictive_analyses",
                "ordering": ["-analysis_date"],
            },
        ),
    ]
